"create_gmail_service()" does automatic refresh access token with "credentials.refresh(Request()):"

- Checks if access_token is expired
- If expired, uses refresh_token to get a new access_token
- Updates the credentials object with the new token
- DOESN'T save the new access_token back to the database -> Next call will still see the old expired token in DB and refresh again
- But doesn't update the database with new tokens


------------------------------------------------------------------------------------------------------------------------------


"refresh_token_expires_in": 604799  // ← 7 days (common in dev/testing)

- Dev/Test Mode: Google often gives shorter refresh token lifetimes (7 days)
- Production: Can be much longer (weeks/months) depending on your OAuth app verification status

- When refresh_token also expires -> then credentials.refresh(Request()) will FAIL

------------------------------------------------------------------------------------------------------------------------------

When both tokens expired 

# When both access_token AND refresh_token are expired:
credentials.refresh(Request())  # ← This will FAIL
# Raises an exception → UserOauthError in your code
# All subsequent Gmail API calls will fail

------------------------------------------------------------------------------------------------------------------------------

Manual Re-OAuth Route

- Complete replacement with brand new access_token, refresh_token, and new expiry times.
- last resort only: Forcing users through full OAuth consent again is bad UX.
-  Manual re-OAuth works but should be last resort

###############################################################################################################################

Access Token:
- Oauth flow essentially is to get the user account specific access token 
- The access token serves EXACTLY 2 purposes
    1. API Authorization: Grants Permission -> This api request is authorized + checks if token contains the right scopes for api request
    2. User Identification: userId="me" means "the user who owns this access_token". access token is per user account specific

    # User A's token
    user_a_service = create_gmail_service(user_a_oauth_data)
    user_a_messages = user_a_service.users().messages().list(userId="me")  # ← Gets User A's emails

    # User B's token  
    user_b_service = create_gmail_service(user_b_oauth_data)
    user_b_messages = user_b_service.users().messages().list(userId="me")  # ← Gets User B's emails

----------------------------------------------------------------------------------------------------------------------------------

Oauth GCP Setup vs Code Implementation:

- Oauth setup on the GCP for: 
    - validation / match-checking 
    - for oauth config info disclosure and clarity 
    - helps Google reviewers verify what your app is doing if you submit for OAuth verification.

- These setup typically across following categories:
    - client
    - data access scope
    - redirect uri
    - test users

- while your actual code implementation (in the fastapi) / user flow determines the actual specific choices from GCP options and details to be used in this app
and your choice must match one of these pre-registered options

    # In generate_gmail_oauth_url()
    params = {
        "client_id": "408807...",           # ← Must match one of the GCP clients
        "redirect_uri": "http://localhost:8000/callback",  # ← Must match one of in GCP list
        "scope": "gmail.readonly gmail.send",              # ← Subset of GCP scopes
    }

- for audience config:
    - Testing Mode: Only specified test users can authorize (100 user limit)
    - Published Mode: Any Gmail user can authorize (after Google review)

- What I have tested:
    - in code implementation, both client id, secret, redirect_url are strictly match-checked
    - for data scope are only for disclosure purpose

----------------------------------------------------------------------------------------------------------------------------------

Pub/Sub Workflow:

- Step 1: Watch API Registration

    gmail_service.users().watch(userId="me", body={
        "topicName": "projects/pillar-mvp/topics/pillar-gmail-notifications",  # ← Specific topic
        "labelIds": ["INBOX", "SENT"]
    })

    this sends watch api request to tell google WHICH SPECIFIC TOPIC NEEDS to WATCH on WHICH SPECIFIC SCOPES FOR WHICH SPECIFIC USER ACCOUNT

- Step 2: Change Detection
    - gmail will know which specific user gmail account it is
    - which specific topic is registered for this specific user account on which specific scopes
    - it will then push the notifcation to that specific TOPIC

- Step 3: Topic Storage
    - that specific topic will store the gmail pushed notifcation

- Step 4: Subscription Delivery
    - the specific subscription that attached to this specific topic detects new notifcation in that topic
    - auto Sends HTTP POST to your endpoint

- Both Topic + Subscription ARE CRITICAL functional components need to be setup for this whole flow to work properly
    - Topic = Message storage/routing
    - Subscription = Delivery mechanism to your app
    - Without either = Watch API fails completely

- But again, all the topic and sub setup here are also pre-configure and you can do as many, the actual code for watch api will specific which exact choice details

- Watch API is a One-Time Call but with Expiration 
    - One watch call monitors that user's Gmail until expiration
    - 7 days maximum (Google's limit)
    - Same in testing AND production
    - You must call watch API again before expiration

- on the GCP pub/sub setup, we also need to attach which specific service account HAS PERMISSION as "publisher" to this specific topic
    - this is purely on the "service_account" level to config which one has the permission to attach it to the SPECIFIC topic.
    - gmail-api-push@system.gserviceaccount.com = Google's official Gmail service account.
    - Other Google services (Calendar, Drive, etc.) have different service accounts.
    - here, only the Gmail service account is given permission as "publisher" to this specific topic.
    - This GCP Publisher permission setup Only = "Gmail service account specifically has permission to publish to this topic, but NOT YET".
    - Only AFTER Watch API Call -> does Gmail start publishing THIS specific user ON THESE SPECIFIC SCOPES and WHICH actual topic to publish to (more detailed). 

----------------------------------------------------------------------------------------------------------------------------------

Token (access / refresh) expiration

- Access tokens expire in 1 hour regardless of testing/production mode.
- Refresh Token
    - testing mode: Refresh tokens ALWAYS expire in 7 days (google hard limit for unverified apps)
    - Published Mode: Refresh tokens last 6 months to 1 year typically (way longer duration)

- Publishing Process Impact
    - Removes 100-user limit, any Gmail user can authorize
    - Extends refresh token lifetime significantly (Some verified apps get indefinite refresh tokens,  Google's review process determines the exact duration)


- # In exchange_auth_code_for_tokens()
    payload = {
        "grant_type": "authorization_code",
        "code": auth_code,
        "client_id": app_config_settings.GOOGLE_CLIENT_ID,
        "client_secret": app_config_settings.GOOGLE_CLIENT_SECRET,
        "redirect_uri": app_config_settings.GOOGLE_REDIRECT_URI,
    }

    Grant Type: 
    
    - "authorization_code": RETURNS BOTH ACCESS & REFRESH TOKENS
    - "refresh_token": New access token (sometimes new refresh token too)

----------------------------------------------------------------------------------------------------------------------------------

Some hardcoded url used:

- "https://accounts.google.com/o/oauth2/auth":
    
    This connects to Google's Authorization Server for account management -> returns and shows google pre-made OAuth consent screen to users

- "https://oauth2.googleapis.com/token":

    This connects to Google's Token Exchange Server -> to exchange for access or both access & refresh token typically depends on the "grant_type"
    This is used in both initial oauth exchange and also the "create_gmail_service"

- https://www.googleapis.com/gmail/v1/

    This connects to google gmail specific apis in general
    Typically needs access token in the request






    

    
